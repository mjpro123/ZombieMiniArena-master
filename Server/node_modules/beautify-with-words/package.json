{
  "name": "beautify-with-words",
  "version": "0.2.0",
  "description": "Beautify javascript with unique \"long-ish words\" for variable names.",
  "keywords": [
    "beautifier",
    "beautify",
    "formatter",
    "pretty"
  ],
  "homepage": "https://github.com/zertosh/beautify-with-words",
  "main": "./beautify-with-words.js",
  "bin": {
    "beautify-with-words": "bin/beautify-with-words"
  },
  "author": "Andres Suarez <zertosh@gmail.com>",
  "bugs": "https://github.com/zertosh/beautify-with-words/issues",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/zertosh/beautify-with-words.git"
  },
  "dependencies": {
    "uglify-js": "~2.4.11",
    "phonetic": "~0.1.0",
    "optimist": "~0.6.0"
  },
  "devDependencies": {
    "mocha": "~1.17.1",
    "should": "~3.1.2"
  },
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "readme": "beautify-with-words\n===================\n\n`beautify-with-words` beautifies javascript and replaces variable names with unique \"long-ish words\". It uses [UglifyJS2](https://github.com/mishoo/UglifyJS2)'s beautifier, but uses a phonetic word generator to rename variables. This makes it <del>easier</del> less-hard to read unminified code and do things like search-and-replace.\n\n\n### Installation ###\nWith [`npm`](http://npmjs.org/) as a global package:\n\n```bash\n{sudo} npm install -g beautify-with-words\n```\n\n### Usage ###\n\n```\nbeautify-with-words [input_file.js] [options]\n```\n\n`beautify-with-words` takes one file at a time â€“ or, if no input file is specified, then input is read from `STDIN`.\n\n* Use the `-o` / `--output` option to specify an output file. By default, the output goes to `STDOUT`;\n* Use the `-b` / `--beautify` to pass UglifyJS2 [beautifier options](https://github.com/mishoo/UglifyJS2#beautifier-options);\n* And `-h` / `--help` for help.\n\nReading from, and saving to, a file:\n\n```\nbeautify-with-words backbone-min.js -o backbone-youre-beautiful-regardless.js\n```\n\nSend the output to `STDOUT`, and turn off syntax _beautification_ but keep variable renaming:\n\n```\nbeautify-with-words backbone-min.js -b beautify=false\n```\n\nTell the beautifier to always insert brackets in `if`, `for`, `do`, `while` or `with` statements. Go [here](https://github.com/mishoo/UglifyJS2#beautifier-options) for more options.\n\n```\nbeautify-with-words backbone-min.js -b bracketize=true\n```\n\n\n### Sample ###\n\nThis:\n\n```bash\ncurl http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.0/backbone-min.js | beautify-with-words\n```\n\nTurns this:\n\n```js\n// stuff...\nif(!h&&typeof require!==\"undefined\")h=require(\"underscore\");a.$=t.jQuery||t.Zepto||t.ender||t.$;a.noConflict=function(){t.Backbone=e;return this};a.emulateHTTP=false;a.emulateJSON=false;var o=a.Events={on:function(t,e,i){if(!l(this,\"on\",t,[e,i])||!e)return this;this._events||(this._events={});var r=this._events[t]||(this._events[t]=[]);r.push({callback:e,context:i,ctx:i||this});return this},once:function(t,e,i){if(!l(this,\"once\",t,[e,i])||!e)return this;var r=this;var s=h.once(function(){r.off(t,s);e.apply(this,arguments)});s._callback=e;return this.on(t,s,i)},\n// more stuff...\n```\n\nInto this:\n\n```js\n// stuff...\n    if (!quinis && typeof require !== \"undefined\") quinis = require(\"underscore\");\n    tenmiey.$ = deegip.jQuery || deegip.Zepto || deegip.ender || deegip.$;\n    tenmiey.noConflict = function() {\n        deegip.Backbone = upan;\n        return this;\n    };\n    tenmiey.emulateHTTP = false;\n    tenmiey.emulateJSON = false;\n    var koken = tenmiey.Events = {\n        on: function(bedad, latay, vublu) {\n            if (!adag(this, \"on\", bedad, [ latay, vublu ]) || !latay) return this;\n            this._events || (this._events = {});\n            var cyem = this._events[bedad] || (this._events[bedad] = []);\n            cyem.push({\n                callback: latay,\n                context: vublu,\n                ctx: vublu || this\n            });\n            return this;\n        },\n        once: function(nodu, flakou, nura) {\n            if (!adag(this, \"once\", nodu, [ flakou, nura ]) || !flakou) return this;\n            var neri = this;\n            var lopo = quinis.once(function() {\n                neri.off(nodu, lopo);\n                flakou.apply(this, arguments);\n            });\n            lopo._callback = flakou;\n            return this.on(nodu, lopo, nura);\n        },\n// more stuff...\n```\n\n### API Usage ###\n\n```\nvar beautifyWithWords = require('beautify-with-words');\n\nvar beautifiedCode = beautifyWithWords(code, options);\n```\n\n`code` is a string of the code you want to beautify. `options` is optional, and must be an object. It has a `b` property, which is an object of the options to be passed to UglifyJS2.\n\n```\nvar fs = require('fs');\nvar beautifyWithWords = require('beautify-with-words');\n\nvar backboneSource =  fs.readFileSync('backbone-min.js', { encoding: 'utf8' });\n\nvar beautified = beautifyWithWords(backboneSource, { b: { bracketize: true } });\n\nconsole.log(beautified);\n```\n",
  "readmeFilename": "README.md"
}
